modules = ["python-3.11"]
[agent]
expertMode = true

[nix]
channel = "stable-25_05"
packages = ["libxcrypt"]

[workflows]
runButton = "Project"

[[workflows.workflow]]
name = "Project"
mode = "parallel"
author = "agent"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "MCP GitHub Issue Matcher Server"

[[workflows.workflow]]
name = "MCP GitHub Issue Matcher Server"
author = "agent"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = """
pip install fastapi uvicorn pydantic aiohttp PyGithub python-multipart && python -c \"
import sys
import os

# Modify the server to run on port 5000
content = '''
import asyncio
import logging
from mcp_server import MCPGitHubIssueServer

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

async def main():
    try:
        server = MCPGitHubIssueServer()
        logger.info('Starting MCP GitHub Issue Matcher server on port 5000...')
        
        # Override the server configuration to use port 5000
        import uvicorn
        config = uvicorn.Config(
            app=server.app,
            host='0.0.0.0',
            port=5000,
            log_level='info'
        )
        server_instance = uvicorn.Server(config)
        await server_instance.serve()
    except Exception as e:
        logger.error(f'Failed to start server: {e}')
        raise

if __name__ == '__main__':
    asyncio.run(main())
'''

with open('main.py', 'w') as f:
    f.write(content)

print('Dependencies installed and server configured for port 5000')
\" && python main.py"""
waitForPort = 5000

[workflows.workflow.metadata]
outputType = "webview"

[[ports]]
localPort = 5000
externalPort = 80
